pipeline {
    agent any

    tools {
        nodejs '18.16'
    }

    environment {
        DATABASE_NAME = 'postgres'
        DATABASE_USER = 'honor_admin'
        DATABASE_PASS = 'pyXA3Y9@7D^co@#i6YBpo!%%Mw6rrSkvRSbWhLjcqJ'
        DATABASE_HOST = 'honorary.postgres.database.azure.com'
        REDIS_HOST    = 'redis'
    }
    stages{
        stage('Stop container') {
            steps {
                // Check if the container exists
                script {
                    containerId = sh(script: 'docker ps -q --filter "name=honorapp"', returnStdout: true).trim()
                }
                // If the container exists, stop it
                when {
                    expression { containerId != '' }
                }
                steps {
                    sh "docker stop $containerId"
                }
            }
        }
        stage('Install') {
            steps {
                git branch: 'main', url: 'https://github.com/ajospino/Honorary.git'
                sh 'touch .env'
                sh 'printenv > .env'
            }
        }
        stage('Build Docker Image') {
            steps {
                sh 'docker build -t honorary:latest .'
            }
        }
        stage('Run Docker Container') {
            steps {
                sh 'docker run -d --rm -v app-storage:/rails/storage --env-file .env --name honorapp -p 3000:3000 honorary:latest'
            }
        }
        stage('E2E') {
            steps {
                sh 'npm i'
                sh 'npm run e2e:record'
            }
        }
        stage('Stop and remove Docker container') {
            steps {
                sh 'docker stop honorapp'
            }
        }
    }
}